//<auto-generated />

using System.Threading.Tasks;
using Refit;
using WmsApi;
using WmsApi.Contracts.Models;

namespace WmsApi.Tracker
{
    public interface ITTrTrafficLightApi
    {
        [Post("/tracker/TTrTrafficLight/UpdateTrafficLight")]
        Task<OperationResult> UpdateTrafficLight(string name = null, int? type = null);

        [Post("/tracker/TTrTrafficLight/Create")]
        Task<OperationResult> Create([Body] TTrTrafficLightCreateModel createModel);

        [Put("/tracker/TTrTrafficLight/Update/{id}")]
        Task<OperationResult> Update(string id, [Body] TTrTrafficLightUpdateModel updateModel);

        [Delete("/tracker/TTrTrafficLight/Delete")]
        Task<OperationResult> Delete([Query] string[] ids = null);

        [Get("/tracker/TTrTrafficLight/Get/{id}")]
        Task<TTrTrafficLightReadModel> Get(string id);

        [Get("/tracker/TTrTrafficLight/GetPage")]
        Task<PageResult<TTrTrafficLightReadModel>> GetPage(int? current = null, int? pageSize = null);

        [Get("/tracker/TTrTrafficLight/GetPageByString")]
        Task<PageResult<TTrTrafficLightReadModel>> GetPageByString(int? current = null, int? pageSize = null, string where = null, string orders = null);

        [Get("/tracker/TTrTrafficLight/GetListByString")]
        Task<PageResult<TTrTrafficLightReadModel>> GetListByString(string where = null, string orders = null);

        [Get("/tracker/TTrTrafficLight/CreateReportExcel")]
        Task CreateReportExcel(string where = null, string orders = null, string reportName = null);

        [Get("/tracker/TTrTrafficLight/GetList")]
        Task<PageResult<TTrTrafficLightReadModel>> GetList();
    }
}