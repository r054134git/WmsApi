//<auto-generated />

using System.Collections.Generic;
using System.Threading.Tasks;
using Refit;
using WmsApi;
using WmsApi.Contracts;
using WmsApi.Contracts.Models;

namespace WmsApi.Report.WmsApi
{
    public interface ITRcInventoryDetailApi
    {
        /// <summary>
        /// 添加扫描信息
        /// </summary>
        /// <returns></returns>
        [Post("/report/TRcInventoryDetail/AddScanDetailEx")]
        Task<AddScanDetailResult> AddScanDetailEx(string bayId = null, string planNo = null, string materialNo = null);

        /// <summary>
        /// 添加扫描信息
        /// </summary>
        /// <returns></returns>
        [Post("/report/TRcInventoryDetail/AddScanDetail")]
        Task<ItemResult<TRcInventoryReadModel>> AddScanDetail(string bayId = null, string planNo = null, string materialNo = null);

        /// <summary>
        /// 完成盘库
        /// </summary>
        /// <returns></returns>
        [Post("/report/TRcInventoryDetail/AddNotScanDetail")]
        Task<List<TRcInventoryDetailReadModel>> AddNotScanDetail(string bayId = null, string planNo = null);

        /// <summary>
        /// 生成盘库报表
        /// </summary>
        /// <returns></returns>
        [Get("/report/TRcInventoryDetail/DownReportExcel")]
        Task DownReportExcel(string bayCode = null, string planNo = null);

        /// <summary>
        /// 生成盘库Pdf报表
        /// </summary>
        /// <returns></returns>
        [Get("/report/TRcInventoryDetail/CreateReportPdf")]
        Task CreateReportPdf(string bayCode = null, string planNo = null);

        [Get("/report/TRcInventoryDetail/CreateReportPdfString")]
        Task<string> CreateReportPdfString(string bayCode = null, string planNo = null);

        [Post("/report/TRcInventoryDetail/Create")]
        Task<OperationResult> Create([Body] TRcInventoryDetailCreateModel createModel);

        [Put("/report/TRcInventoryDetail/Update/{id}")]
        Task<OperationResult> Update(string id, [Body] TRcInventoryDetailUpdateModel updateModel);

        [Delete("/report/TRcInventoryDetail/Delete")]
        Task<OperationResult> Delete([Query] string[] ids = null);

        [Get("/report/TRcInventoryDetail/Get/{id}")]
        Task<TRcInventoryDetailReadModel> Get(string id);

        [Get("/report/TRcInventoryDetail/GetPage")]
        Task<PageResult<TRcInventoryDetailReadModel>> GetPage(int? current = null, int? pageSize = null);

        [Get("/report/TRcInventoryDetail/GetPageByString")]
        Task<PageResult<TRcInventoryDetailReadModel>> GetPageByString(int? current = null, int? pageSize = null, string where = null, string orders = null);

        [Get("/report/TRcInventoryDetail/GetListByString")]
        Task<PageResult<TRcInventoryDetailReadModel>> GetListByString(string where = null, string orders = null);

        [Get("/report/TRcInventoryDetail/CreateReportExcel")]
        Task CreateReportExcel(string where = null, string orders = null, string reportName = null);

        [Get("/report/TRcInventoryDetail/GetList")]
        Task<PageResult<TRcInventoryDetailReadModel>> GetList();
    }
}