//<auto-generated />

using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Refit;
using WmsApi;
using WmsApi.Contracts;
using WmsApi.Contracts.Models;

namespace WmsApi.Plan
{
    public partial interface ITPlBayTransferApi
    {
        [Post("/plan/TPlBayTransfer/CreateTransferPlan")]
        Task<OperationResult> CreateTransferPlan([Body] TPlBayTransferCreateModel createModel);

        [Post("/plan/TPlBayTransfer/SendTransferInfo")]
        Task<ItemResult<TPlBayTransferReadModel>> SendTransferInfo(string materialNo = null, string location = null);

        [Multipart]
        [Post("/plan/TPlBayTransfer/ImportBayTransferData")]
        Task<OperationResult<List<string>>> ImportBayTransferData(MultipartItem file);

        [Post("/plan/TPlBayTransfer/HoldCreateTransferPlan")]
        Task<AddScanDetailResult> HoldCreateTransferPlan(string vehicleId = null, string material = null, string fromBayName = null, string destBayName = null);

        [Get("/plan/TPlBayTransfer/GetTransferPlan")]
        Task<List<TransferPlanModel>> GetTransferPlan(string vehicleId = null);

        [Put("/plan/TPlBayTransfer/HoldDeleteTransferPlan")]
        Task<OperationResult> HoldDeleteTransferPlan(string vehicleId = null, string material = null);

        [Get("/plan/TPlBayTransfer/CreatePlanCondition")]
        Task<OperationResult> CreatePlanCondition(string vehicleTypeId = null);

        [Post("/plan/TPlBayTransfer/UpdateTransferPlan")]
        Task<OperationResult> UpdateTransferPlan([Body] TPlBayTransferUpdateModel updateModel);

        [Delete("/plan/TPlBayTransfer/DeleteTransferPlan")]
        Task<OperationResult> DeleteTransferPlan(string[] ids = null);

        [Post("/plan/TPlBayTransfer/Create")]
        Task<OperationResult> Create([Body] TPlBayTransferCreateModel createModel);

        [Put("/plan/TPlBayTransfer/Update/{id}")]
        Task<OperationResult> Update(string id, [Body] TPlBayTransferUpdateModel updateModel);

        [Delete("/plan/TPlBayTransfer/Delete")]
        Task<OperationResult> Delete(string[] ids = null);

        [Get("/plan/TPlBayTransfer/Get/{id}")]
        Task<TPlBayTransferReadModel> Get(string id);

        [Get("/plan/TPlBayTransfer/GetPage")]
        Task<PageResult<TPlBayTransferReadModel>> GetPage(int? current = null, int? pageSize = null);

        [Get("/plan/TPlBayTransfer/GetPageByString")]
        Task<PageResult<TPlBayTransferReadModel>> GetPageByString(int? current = null, int? pageSize = null, string where = null, string orders = null);

        [Get("/plan/TPlBayTransfer/GetListByString")]
        Task<PageResult<TPlBayTransferReadModel>> GetListByString(string where = null, string orders = null);

        [Get("/plan/TPlBayTransfer/CreateReportExcel")]
        Task CreateReportExcel(string where = null, string orders = null, string reportName = null);

        [Get("/plan/TPlBayTransfer/GetList")]
        Task<PageResult<TPlBayTransferReadModel>> GetList();
    }
}